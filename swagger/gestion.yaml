openapi: 3.0.3
info:
  title: R4.01-Project
  version: 1.0.0
servers:
  - url: https://gestion-r401.paillaugue.fr/
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    resultatRencontre:
      type: string
      enum:
        - Victoire
        - Defaite
        - Nul
security:
  - bearerAuth: []

paths:
  /commentaire:
    get:
      tags:
        - Comment
      summary: Returns a single comment
      description: Returns a single comment based on ID
      operationId: getAComment
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: number
            example: 2
      responses:
        '200':
          description: 'Comment fetched successfully'
        '400':
          description: 'You need to pass an id to fetch a comment'
        '500':
          description: 'Comment not found'
    put:
      tags:
        - Comment
      summary: Update a comment
      description: Update a comment
      operationId: updateAComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - id_joueur
                - contenu
              properties:
                id:
                  type: number
                id_joueur:
                  type: number
                contenu:
                  type: string
              example:
                id: 42
                id_joueur: 1
                contenu: Test content 2
      responses:
        '200':
          description: 'Comment updated'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
    post:
      tags:
        - Comment
      summary: Create a comment
      description: Create a comment
      operationId: createAComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id_joueur
                - contenu
              properties:
                id_joueur:
                  type: number
                contenu:
                  type: string
              example:
                id_joueur: 1
                contenu: Test content
      responses:
        '200':
          description: 'Comment created'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
    delete:
      tags:
        - Comment
      summary: Delete a comment
      description: Delete a comment
      operationId: deleteAComment
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: number
            example: 34
      responses:
        '200':
          description: 'Comment deleted'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
  /joueur:
    get:
      tags:
        - Player
      summary: Get player(s)
      description: Get a specific player by ID, or all players if no ID is provided
      operationId: getAPlayer
      parameters:
        - name: id
          in: query
          description: ID of the player to fetch. If omitted, returns all players.
          schema:
            type: number
            example: 32
      responses:
        '200':
          description: 'Players fetched successfully'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Player not found'
        '500':
          description: 'An error occurred'
    post:
      tags:
        - Player
      summary: Create a player
      description: Create a player
      operationId: createAPlayer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                nom:
                  type: string
                prenom:
                  type: string
                numero_licence:
                  type: number
                date_naissance:
                  type: string
                taille:
                  type: number
                poid:
                  type: number
              required:
                - nom
                - prenom
                - numero_licence
                - date_naissance
                - taille
                - poids
              example:
                date_naissance: '1951-10-11'
                nom: Goldman
                numero_licence: 1234
                poid: 82
                prenom: Jean-Jacques
                taille: 165
      responses:
        '200':
          description: 'Player(s) fetched successfully'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
    delete:
      tags:
        - Player
      summary: Delete player
      description: Delete player
      operationId: deletePlayer
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: number
            example: 33
      responses:
        '200':
          description: 'Player deleted successfully'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
    patch:
      tags:
        - Player
      summary: Update a player
      description: Update a player
      operationId: updateAPlayer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: number
                nom:
                  type: string
                prenom:
                  type: string
                numero_licence:
                  type: number
                date_naissance:
                  type: string
                taille:
                  type: number
                poid:
                  type: number
              example:
                id: 32
                nom: Goldman
                prenom: Jean-Jacques
                numero_licence: 1234
                date_naissance: '1951-10-11'
                taille: 165
                poid: 82
      responses:
        '200':
          description: 'Player updated successfully'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
  /utilisateur:
    get:
      tags:
        - User
      summary: Get all users
      description: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: 'Users fetched successfully'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
    post:
      tags:
        - User
      summary: Create a user
      description: Create a user
      operationId: createAUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                password:
                  type: string
                username:
                  type: string
              example:
                username: Jean-Jacques
                password: password
      responses:
        '200':
          description: 'User created successfully'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'User already exists'
        '500':
          description: 'An error occurred'
  /rencontre:
    get:
      tags:
        - Rencontre
      summary: Get rencontre(s)
      description: Get a specific rencontre by ID, or all rencontres if no ID is provided
      operationId: getARencontre
      parameters:
        - name: id
          in: query
          description: ID of the rencontre to fetch. If omitted, returns all rencontres.
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: 'Rencontre(s) fetched successfully'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Rencontre not found'
        '500':
          description: 'An error occurred'
    post:
      tags:
        - Rencontre
      summary: Create a rencontre
      description: Create a rencontre
      operationId: createARencontre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date_heure
                - equipe_adverse
                - lieu
              properties:
                date_heure:
                  type: string
                equipe_adverse:
                  type: string
                lieu:
                  type: string
              example:
                date_heure: 2025-04-10 14:00
                equipe_adverse: Colomiers
                lieu: Domicile
      responses:
        '200':
          description: 'Rencontre created successfully'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
    delete:
      tags:
        - Rencontre
      summary: Delete a rencontre
      description: Delete a rencontre
      operationId: deleteARencontre
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: number
            example: 11
      responses:
        '200':
          description: ''
    patch:
      tags:
        - Rencontre
      summary: Update a rencontre
      description: Update a rencontre
      operationId: updateARencontre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: number
                equipe_adverse:
                  type: string
                date_heure:
                  type: string
                lieu:
                  type: string
                resultat:
                  $ref: '#/components/schemas/resultatRencontre'
              example:
                id: 14
                equipe_adverse: Colomiers
      responses:
        '200':
          description: 'Rencontre updated successfully'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
  /stats/club:
    get:
      tags:
        - Stats
      summary: Get club stats
      description: Get club stats
      operationId: getClubStats
      responses:
        '200':
          description: 'Stats retrieved'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'
  /stats/player:
    get:
      tags:
        - Stats
      summary: Get player stats
      description: Get player stats
      operationId: getPlayerStats
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: 'Stats retrieved'
        '400':
          description: 'Bad request - missing required fields'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'An error occurred'

tags:
  - name: Comment
  - name: Player
  - name: User
  - name: Rencontre
  - name: Stats
